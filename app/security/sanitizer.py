#!/usr/bin/env python3
"""
Code Sanitizer
Removes branding and sensitive markers from generated code.
"""

import re
from pathlib import Path
import logging

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[logging.FileHandler("sanitizer.log"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

class CodeSanitizer:
    BRAND_PATTERNS = [
        (r'//\s*Generated by Kaleidoscope AI', ''),
        (r'<!-- KALEIDOSCOPE_MARKER -->', ''),
        (r'KALEIDOSCOPE_VERSION=\d+\.\d+\.\d+', '')
    ]

    def sanitize_project(self, path: Path):
        """Sanitize all files in a project directory."""
        if not path.exists():
            logger.error(f"Project path {path} does not exist")
            return
        logger.info(f"Sanitizing project at {path}")
        for file in path.glob('**/*'):
            if file.is_file():
                self._sanitize_file(file)

    def _sanitize_file(self, file: Path):
        """Sanitize a single file."""
        try:
            with open(file, 'r+', encoding='utf-8') as f:
                content = f.read()
                original_size = len(content)
                for pattern, replacement in self.BRAND_PATTERNS:
                    content = re.sub(pattern, replacement, content)
                if len(content) != original_size:
                    f.seek(0)
                    f.write(content)
                    f.truncate()
                    logger.info(f"Sanitized {file}")
        except IOError as e:
            logger.error(f"Error sanitizing {file}: {str(e)}")
